#!/usr/bin/env python3

from functools import partial
import logging
import multiprocessing
from pathlib import Path
from random import choices
import subprocess

import boto3
import h5py
import numpy as np


def run_cmd(*args, stdout=subprocess.PIPE):
    """
    Run and log a subprocess.

    """
    cmd = ' '.join(args)
    logging.info('running command: %s', cmd)

    try:
        proc = subprocess.run(
            cmd.split(), check=True,
            stdout=stdout, stderr=subprocess.STDOUT,
            universal_newlines=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(
            'command failed with status %d:\n%s',
            e.returncode, e.output.strip('\n')
        )
        raise
    else:
        return proc


def trento_prior(size=10**3):
    """
    Sample trento parameters from the Bayesian prior distribution

    """
    for p, sigma_fluct, w, dmin3 in zip(
            np.random.uniform(-.5, .5, size),
            np.random.uniform(0, 2, size),
            np.random.uniform(.4, 1., size),
            np.random.uniform(0, 1.7**3, size)
            ):

        k = 1/sigma_fluct**2
        dmin = dmin3**(1/3)

        yield dict(p=p, k=k, w=w, dmin=dmin)


def trento_post(size=10**3):
    """
    Samples trento parameters from the Bayesian posterior distribution

    """
    logging.info('loading mcmc chain')

    with h5py.File('chain.hdf', 'r') as f:
        dset = f['chain']
        nparam = dset.shape[-1]
        chain = np.array(dset).reshape(-1, nparam)

        for param in choices(chain, k=size):
            norm1, norm2, p, sigma_fluct, w, dmin3, *_ = param
            k = 1/sigma_fluct**2
            dmin = dmin3**(1/3)

            yield dict(p=p, k=k, w=w, dmin=dmin)


def trento(args, name):
    """
    Runs trento with args and saves minimum bias event attributes

    """
    pid, args_dict = args

    cache_dir = Path(name)
    cache_dir.mkdir(exist_ok=True)

    fname = cache_dir / '{0:03d}.dat'.format(pid)

    with open(fname, 'w') as f:
        run_cmd(
            'trento', 'Pb Pb',
            '--number-events {}'.format(10**4),
            '--reduced-thickness {}'.format(args_dict['p']),
            '--fluctuation {}'.format(args_dict['k']),
            '--nucleon-width {}'.format(args_dict['w']),
            '--nucleon-min-dist {}'.format(args_dict['dmin']),
            '--cross-section {}'.format(6.4),
            '--grid-max {}'.format(10),
            '--grid-step {}'.format(args_dict['w']),
            '--ncoll',
            stdout=f,
            )


def main():
    logging.basicConfig(level=logging.INFO)

    s3 = boto3.resource("s3")
    bucket = s3.Bucket("dukeqcd")
    
    if not Path("chain.hdf").exists():
        bucket.download_file(
            'glauber-attributes/chain.hdf',
            'chain.hdf'
        )

    size = 10**2
    ncpu = multiprocessing.cpu_count()

    prior = (trento_prior(size=size), 'prior')
    post = (trento_post(size=size), 'post')

    for (args, name) in (prior, post):
        func = partial(trento, name=name)
        multiprocessing.Pool(ncpu).map(func, enumerate(args))


if __name__ == "__main__":
    main()
