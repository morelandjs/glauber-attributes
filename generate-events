#!/usr/bin/env python3

import logging
import multiprocessing
from pathlib import Path
from random import choices
import subprocess

import h5py
import numpy as np


def run_cmd(*args, stdout=subprocess.PIPE):
    """
    Run and log a subprocess.

    """
    cmd = ' '.join(args)
    logging.info('running command: %s', cmd)

    try:
        proc = subprocess.run(
            cmd.split(), check=True,
            stdout=stdout, stderr=subprocess.STDOUT,
            universal_newlines=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(
            'command failed with status %d:\n%s',
            e.returncode, e.output.strip('\n')
        )
        raise
    else:
        return proc


def trento_args(size=10**3):
    """
    Samples trento parameters from the Bayesian posterior

    """
    logging.info('loading mcmc chain')

    with h5py.File('chain.hdf', 'r') as f:
        dset = f['chain']
        nparam = dset.shape[-1]
        chain = np.array(dset).reshape(-1, nparam)

        for param in choices(chain, k=size):
            norm1, norm2, p, sigma_fluct, w, dmin3, *_ = param
            yield dict(p=p, k=1/sigma_fluct**2, w=w, dmin=dmin3**(1/3))


def trento(args):
    """
    Runs trento with args and saves minimum bias event attributes

    """
    pid, args_dict = args

    cache_dir = Path('cache')
    if not cache_dir.exists():
        cache_dir.mkdir()

    fname = cache_dir / '{0:03d}.dat'.format(pid)

    with open(fname, 'w') as f:
        run_cmd(
            'trento', 'Pb Pb',
            '--number-events {}'.format(10**4),
            '--reduced-thickness {}'.format(args_dict['p']),
            '--fluctuation {}'.format(args_dict['k']),
            '--nucleon-width {}'.format(args_dict['w']),
            '--nucleon-min-dist {}'.format(args_dict['dmin']),
            '--cross-section {}'.format(6.4),
            '--grid-max {}'.format(10),
            '--grid-step {}'.format(args_dict['w']),
            '--ncoll',
            stdout=f,
            )


def main():
    logging.basicConfig(level=logging.INFO)

    ncpu = multiprocessing.cpu_count()
    multiprocessing.Pool(ncpu).map(
            trento, enumerate(trento_args(size=10**3))
            )


if __name__ == "__main__":
    main()
