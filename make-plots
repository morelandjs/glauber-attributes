#!/usr/bin/env python3


import argparse
from collections import defaultdict
import logging
import os
from random import choices
import subprocess

import h5py
import matplotlib.pyplot as plt
from matplotlib import lines
from matplotlib import patches
from matplotlib import ticker
import numpy as np


fontsmall, fontnormal, fontlarge = 5, 6, 7
offblack = '#262626'
aspect = 1/1.618
resolution = 72.27
textwidth = 307.28987/resolution
textheight = 261.39864/resolution
fullwidth = 350/resolution
fullheight = 270/resolution

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'sans-serif',
    'font.sans-serif': ['Lato'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'sans',
    'mathtext.cal': 'sans',
    'font.size': fontnormal,
    'legend.fontsize': fontnormal,
    'axes.labelsize': fontnormal,
    'axes.titlesize': fontlarge,
    'xtick.labelsize': fontsmall,
    'ytick.labelsize': fontsmall,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .5,
    'lines.markersize': 3,
    'lines.markeredgewidth': 0,
    'patch.linewidth': .5,
    'axes.linewidth': .4,
    'xtick.major.width': .4,
    'ytick.major.width': .4,
    'xtick.minor.width': .4,
    'ytick.minor.width': .4,
    'xtick.major.size': 1.2,
    'ytick.major.size': 1.2,
    'xtick.minor.size': .8,
    'ytick.minor.size': .8,
    'xtick.major.pad': 1.5,
    'ytick.major.pad': 1.5,
    'axes.formatter.limits': (-5, 5),
    'axes.spines.top': False,
    'axes.spines.right': False,
    'axes.labelpad': 3,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.cmap': 'Blues',
    'image.interpolation': 'none',
    'pdf.fonttype': 42
})


plot_functions = {}


def plot(f):
    """
    Plot function decorator.  Calls the function, does several generic tasks,
    and saves the figure as the function name.

    """
    def wrapper(*args, **kwargs):
        logging.info('generating plot: %s', f.__name__)
        f(*args, **kwargs)

        fig = plt.gcf()

        if not fig.get_tight_layout():
            set_tight(fig)

        plotfile = '{}.pdf'.format(f.__name__)
        fig.savefig(str(plotfile))
        logging.info('wrote %s', plotfile)
        plt.close(fig)

    plot_functions[f.__name__] = wrapper

    return wrapper


def set_tight(fig=None, **kwargs):
    """
    Set tight_layout with a better default pad.

    """
    if fig is None:
        fig = plt.gcf()

    kwargs.setdefault('pad', .1)
    fig.set_tight_layout(kwargs)


def auto_ticks(ax, axis='both', minor=False, **kwargs):
    """
    Convenient interface to matplotlib.ticker locators.

    """
    axis_list = []

    if axis in {'x', 'both'}:
        axis_list.append(ax.xaxis)
    if axis in {'y', 'both'}:
        axis_list.append(ax.yaxis)

    for axis in axis_list:
        axis.get_major_locator().set_params(**kwargs)
        if minor:
            axis.set_minor_locator(ticker.AutoMinorLocator(minor))


def run_cmd(*args, stdout=subprocess.PIPE):
    """
    Run and log a subprocess.

    """
    cmd = ' '.join(args)
    logging.info('running command: %s', cmd)

    try:
        proc = subprocess.run(
            cmd.split(), check=True,
            stdout=stdout, stderr=subprocess.STDOUT,
            universal_newlines=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(
            'command failed with status %d:\n%s',
            e.returncode, e.output.strip('\n')
        )
        raise
    else:
        return proc

def trento_args(size=100):
    """
    Samples trento parameters from the Bayesian posterior

    """
    with h5py.File('chain.hdf' , 'r') as f:
        dset = f['chain']
        nparam = dset.shape[-1]
        chain = np.array(dset).reshape(-1, nparam)

        for param in choices(chain, k=size):
            norm1, norm2, p, sigma_fluct, w, dmin3, *_ = param 
            yield dict(p=p, k=1/sigma_fluct**2, w=w, dmin=dmin3**(1/3))


@plot
def uncertainties(fname='attrs.dat', nbin=20):
    """
    Calculate <Ncoll>(Centrality) for each set of trento arguments

    """
    figsize=(textwidth, aspect*textwidth)
    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=figsize, sharex=True)

    post_samples = defaultdict(list)
    plot_attrs = ['Npart', 'Npart']

    for args in trento_args(size=100):
        print(args)

        if os.path.exists(fname):
            os.remove(fname)

        with open(fname, 'w') as f:
            run_cmd(
                'trento', 'Pb Pb',
                '--number-events {}'.format(10**3),
                '--reduced-thickness {}'.format(args['p']),
                '--fluctuation {}'.format(args['k']),
                '--nucleon-width {}'.format(args['w']),
                '--nucleon-min-dist {}'.format(args['dmin']),
                '--cross-section {}'.format(6.4),
                '--grid-max {}'.format(10),
                '--grid-step {}'.format(args['w']),
                stdout=f,
                ) 

        names = ('Nev', 'b', 'Npart', 'mult', 'e2', 'e3', 'e4', 'e5')
        trento_attrs = np.genfromtxt(fname, names=names, dtype=None)

        for attr in plot_attrs:
            sorted_attrs = np.sort(trento_attrs, order='mult')[::-1]
            post_samples[attr].append(
                sorted_attrs[attr].reshape(nbin, -1).mean(axis=1)
            )

    for attr, col in zip(plot_attrs, axes.T):
        samples = np.array(post_samples[attr])
        indices = [int(p*len(samples)) for p in (.15865, .84135)]

        ylabels = [attr, r'{}/$\langle$ {} $\rangle$'.format(attr, attr)]

        for ax, ylabel in zip(col, ylabels):
            x = np.linspace(0, 100, nbin) 
            y = samples.mean(axis=0)
            dy = samples.std(axis=0)

            if ax.is_first_row():
                ax.fill_between(
                    x, y - dy, y + dy,
                    color=plt.cm.Blues(.2), lw=0, label='95% CI'
                )
                ax.plot(x, y, color=plt.cm.Blues(.6))
            else:
                ax.fill_between(
                    x, (y - dy)/y, (y + dy)/y,
                    color=plt.cm.Blues(.2), lw=0, zorder=0, label='95% CI'
                )

                ax.plot(x, np.ones_like(x), color=plt.cm.Blues(.6))

                ax.set_xlabel('Centrality')

            ax.set_ylabel(ylabel)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()

if __name__ == "__main__":
    main()
