#!/usr/bin/env python3

import argparse
from collections import defaultdict
import glob
import logging
from pathlib import Path

import matplotlib.pyplot as plt
from matplotlib import ticker
import numpy as np
from scipy.optimize import brentq
from scipy.special import expi


aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8.0, 9.25, 10.0
offblack = '#262626'

blue = plt.cm.Blues(.6)
green = plt.cm.Greens(.6)
red = plt.cm.Reds(.6)

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'serif',
    'font.serif': ['CMU Serif'],
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': 'black',
    'axes.edgecolor': 'black',
    'axes.labelcolor': 'black',
    'xtick.color': 'black',
    'ytick.color': 'black',
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 42,
})

plotdir = Path('plots')
plotdir.mkdir(exist_ok=True)

plot_functions = {}


def plot(f):
    """
    Plot function decorator.  Calls the function, does several generic tasks,
    and saves the figure as the function name.

    """
    def wrapper(*args, **kwargs):
        logging.info('generating plot: %s', f.__name__)
        f(*args, **kwargs)

        fig = plt.gcf()

        if not fig.get_tight_layout():
            finish(fig)

        plotfile = plotdir / '{}.pdf'.format(f.__name__)
        fig.savefig(str(plotfile))
        logging.info('wrote %s', plotfile)
        plt.close(fig)

    plot_functions[f.__name__] = wrapper

    return wrapper


def finish(despine=True, remove_ticks=False, pad=0.1, h_pad=None, w_pad=None,
           rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)


@plot
def collision_profile():
    plt.figure(figsize=(columnwidth, aspect*columnwidth))

    sigma_nn = 6.4
    b = np.linspace(0, 5, 1000)

    # black-disk proton
    disk_radius = np.sqrt(sigma_nn/np.pi)
    black_disk = np.heaviside(-(b - disk_radius), 1)
    plt.plot(b, black_disk, color=offblack, label='black disk')

    # Gaussian protons
    for w in [.5, .7, .9]:
        norm = 4*np.pi*w**2 

        def fit_xsection(x, A=6):
            c = A**2/4
            rhs = sigma_nn/norm
            return c - expi(-np.exp(x)) + expi(-np.exp(x-c)) - rhs

        cross_sec_param = brentq(fit_xsection, -10, 20)
        pcoll = 1 - np.exp(-np.exp(cross_sec_param - .25*b**2/w**2))
        plt.plot(b, pcoll, label=r'$w={}$ [fm]'.format(w))

    plt.xlim(0, 5)
    plt.xlabel('$b$ [fm]')
    plt.ylabel(r'$P_\mathrm{coll}(b)$')
    plt.legend()

    finish(pad=.2)


@plot
def uncertainties(nbin=20):
    """
    Calculate <Ncoll>(Centrality) for each set of trento arguments

    """
    fig, axes = plt.subplots(
        nrows=2, ncols=2,
        figsize=(textwidth, aspect*textwidth),
    )

    plot_attrs = [('npart', 2), ('ncoll', 3)]

    # alice glauber model
    alice_glauber = {}
    for attr, _ in plot_attrs:
        fname = 'alice/{}.txt'.format(attr)
        x, y, yerr = np.loadtxt(fname, usecols=(0, 3, 4)).T
        alice_glauber[attr] = dict(x=x, y=y, yerr=yerr)

    # trento prior and posterior samples
    trento_samples = dict(prior=defaultdict(list), post=defaultdict(list))
    for dist in trento_samples.keys():
        for fname in glob.glob('{}/*.dat'.format(dist)):
            events = np.loadtxt(fname)
            sorted_events = events[events[:, 4].argsort()][::-1]

            for attr, index in plot_attrs:
                trento_samples[dist][attr].append(
                        sorted_events[:, index].reshape(nbin, -1).mean(axis=1)
                )

    # plot trento npart and ncoll
    for (attr, index), col in zip(plot_attrs, axes.T):

        alice_glb = alice_glauber[attr]

        trento = {}
        for dist in trento_samples.keys():
            samples = np.array(trento_samples[dist][attr])
            trento[dist] = dict(
                x=np.linspace(0, 100, nbin),
                y=samples.mean(axis=0),
                yerr=samples.std(axis=0),
            )

        label_fmt = r'{}/$\langle$ {} $\rangle$'
        ylabels = [attr.title(), label_fmt.format(attr.title(), attr.title())]

        handles = []

        for ax, ylabel in zip(col, ylabels):

            trento_prior = (trento['prior'], blue)
            trento_post = (trento['post'], green)
            alice = (alice_glb, red)

            for (model, color) in [trento_prior, trento_post, alice]:

                x, y, dy = [model[k] for k in ('x', 'y', 'yerr')] 

                if ax.is_first_row():
                    line, = ax.plot(x, y, color=color, zorder=1)
                    band = ax.fill_between(x, y - dy, y + dy,
                            color=color, alpha=.2, lw=0, zorder=0, label='95% CI')
                    handles.append((line, band))
                    ax.set_xticklabels([])

                else:
                    y0 = np.interp(x, trento['prior']['x'], trento['prior']['y'])
                    ax.plot(x, y/y0, color=color, zorder=1)
                    ax.fill_between(x, (y - dy)/y0, (y + dy)/y0,
                        color=color, alpha=.2, lw=0, zorder=0, label='95% CI')
                    ax.set_xlabel('Centrality')

            ax.set_ylabel(ylabel)

    labels = ['Trento prior', 'Trento posterior', 'ALICE Glauber']
    axes[0][1].legend(handles, labels)

    finish(pad=0.5)


def main():
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
